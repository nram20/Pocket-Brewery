"use strict";function config(e,t){e.state("home",{url:"/",templateUrl:"/html/home.html",controller:"homeCtrl",controllerAs:"vm"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl",controllerAs:"vm"}).state("register",{url:"/register",templateUrl:"/html/registration.html",controller:"regCtrl",controllerAs:"vm"}).state("profile",{url:"/profile",templateUrl:"/html/profile.html",controller:"profileCtrl",controllerAs:"vm"}).state("editProfile",{url:"/editProfile",templateUrl:"/html/editProfile.html",controller:"editProfileCtrl",controllerAs:"vm"}).state("myBeers",{url:"/myBeers",templateUrl:"/html/myBeers.html",controller:"myBeersCtrl",controllerAs:"vm"}).state("allBeers",{url:"/allBeers",templateUrl:"/html/allBeers.html",controller:"allBeersCtrl",controllerAs:"vm"}).state("review",{url:"/review",templateUrl:"/html/review.html",controller:"reviewCtrl",controllerAs:"vm"}).state("reviewspecific",{url:"/reviewspecific/:id",templateUrl:"/html/reviewspecific.html",controller:"reviewspecificCtrl",controllerAs:"vm"}),t.otherwise("/")}function allBeersCtrl(e,t,r){console.log("allBeersCtrl");var o=this;o.notSampled=[],o.startreview=function(){t.go("review")},o.reviewThis=function(e){t.go("reviewspecific",{id:e})},e.getNotSampled().then(function(e){o.notSampled=e.data})}function editProfileCtrl(e,t,r){console.log("editProfileCtrl");var o=this;o.editing={},e.getPerson(r.currentUser).then(function(e){o.editing=e.data}),o.cancel=function(){t.go("profile")},o.save=function(){if(o.editing.password1===o.editing.password2){var n;n=void 0!==o.editing.password1?{email:o.editing.email,password:o.editing.password1}:{email:o.editing.email},e.editprofile(n).then(function(o){e.logout().then(function(e){console.log(e),r.currentUser=null,t.go("home")})})}}}function homeCtrl(e,t){console.log("homeCtrl")}function loginCtrl(e,t,r){console.log("loginCtrl");var o=this;o.credentials={},o.login=function(){e.login(o.credentials).then(function(){t.go("profile")})}}function mainCtrl(e,t,r,o){console.log("mainCtrl");var n=this;n.isLoggedIn=!!o.currentUser,t.$watch(function(){return o.currentUser},function(e,t){n.isLoggedIn=!!e}),n.logOut=function(){e.logout().then(function(e){console.log(e),o.currentUser=null,r.go("home")})}}function myBeersCtrl(e,t,r,o){console.log("myBeersCtrl");var n=this;n.beers={},e.getPerson(r.currentUser).then(function(e){n.beers=e.data.ratings,console.log(n.beers),n.beers=n.beers.filter(function(e){return void 0!==e.score})}),n.deleteRating=function(t){e.deleteRating(t).then(function(t){e.getPerson(r.currentUser).then(function(e){n.beers=e.data.ratings,console.log(n.beers),n.beers=n.beers.filter(function(e){return void 0!==e.score})})})},n.sortBy=function(e){n.sortOrder===e?n.sortOrder="-"+e:n.sortOrder=e},n.editRating=function(e,r,n){o.set({edited:!0,load:{score:r,comment:n}}),t.go("reviewspecific",{id:e})}}function profileCtrl(e,t,r){console.log("profileCtrl");var o=this;o.user={},e.getPerson(r.currentUser).then(function(e){o.user=e.data}),o.editProfile=function(){t.go("editProfile")}}function regCtrl(e,t,r){console.log("regCtrl");var o=this;o.registration={},o.success=!1,o.passwordsNotMatch=!1,o.register=function(){if(o.registration.password1!==o.registration.password2)return o.passwordsNotMatch=!0;var r={email:o.registration.email,password:o.registration.password1};o.success=!0,e.signup(r).then(function(e){t.go("login")})}}function reviewCtrl(e,t,r,o){console.log("reviewCtrl");var n=this;n.beer={},n.loading=!0,n.rating={},o.getRandom().then(function(e){n.beer=e.data,n.loading=!1}),n.rate=function(){var t={beerId:n.beer.id,beerName:n.beer.name,score:n.rating.score,comment:n.rating.comment};e.addRating(t).then(function(e){n.loading=!0,o.getRandom().then(function(e){n.beer=e.data,n.loading=!1})})},n.notsampled=function(){console.log("whhaaat");var t={beerId:n.beer.id,beerName:n.beer.name,score:void 0,comment:void 0};e.addRating(t).then(function(e){n.loading=!0,o.getRandom().then(function(e){n.beer=e.data,n.loading=!1})})}}function reviewspecificCtrl(e,t,r,o,n,i){console.log("reviewspecificCtrl");var l=this;l.beer={},l.loading=!0,l.rating={},o.getById(n.id).then(function(e){l.beer=e.data,l.loading=!1;var t=i.get();t.edited&&(console.log(t.load.score),l.rating.score=t.load.score,l.rating.comment=t.load.comment)}),l.rate=function(){var r={beerId:l.beer.id,beerName:l.beer.name,score:l.rating.score,comment:l.rating.comment};e.addRatingToSpecific(r.beerId,r).then(function(e){var r=i.get();return r.edited?t.go("myBeers"):void t.go("allBeers")})},l.notsampled=function(){t.go("allBeers")}}config.$inject=["$stateProvider","$urlRouterProvider"],allBeersCtrl.$inject=["User","$state","$sessionStorage"],editProfileCtrl.$inject=["User","$state","$sessionStorage"],homeCtrl.$inject=["User","$state"],loginCtrl.$inject=["User","$state","$sessionStorage"],mainCtrl.$inject=["User","$scope","$state","$sessionStorage"],myBeersCtrl.$inject=["User","$state","$sessionStorage","StoreData"],profileCtrl.$inject=["User","$state","$sessionStorage"],regCtrl.$inject=["User","$state","$timeout"],reviewCtrl.$inject=["User","$state","$sessionStorage","BeerAPI"],reviewspecificCtrl.$inject=["User","$state","$sessionStorage","BeerAPI","$stateParams","StoreData"],angular.module("beerApp",["ui.router","ui.bootstrap","angularSpinner","ngStorage"]).config(config),angular.module("beerApp").controller("allBeersCtrl",allBeersCtrl),angular.module("beerApp").controller("editProfileCtrl",editProfileCtrl),angular.module("beerApp").controller("homeCtrl",homeCtrl),angular.module("beerApp").controller("loginCtrl",loginCtrl),angular.module("beerApp").controller("mainCtrl",mainCtrl),angular.module("beerApp").controller("myBeersCtrl",myBeersCtrl),angular.module("beerApp").controller("profileCtrl",profileCtrl),angular.module("beerApp").controller("regCtrl",regCtrl),angular.module("beerApp").controller("reviewCtrl",reviewCtrl),angular.module("beerApp").controller("reviewspecificCtrl",reviewspecificCtrl);var app=angular.module("beerApp");app.service("User",["$http","$sessionStorage",function(e,t){this.signup=function(t){return e.post("./api/users/register",t)},this.login=function(r){return e.post("./api/users/login",r).then(function(e){console.log(e),t.currentUser=e.data})},this.logout=function(t){return e["delete"]("./api/users/logout",t)},this.loadprofile=function(){return e.get("./api/users/profile")},this.editprofile=function(t){return e.put("./api/users/profile",t)},this.getPeople=function(){return e.get("./api/users/people")},this.getPerson=function(t){return e.get("./api/users/people/"+t)},this.addRating=function(t){return e.post("./api/users/addRating/",t)},this.deleteRating=function(t){return e["delete"]("./api/users/deleteRating/"+t)},this.addRatingToSpecific=function(t,r){return e.post("./api/users/addRatingToSpecific/"+t,r)},this.getNotSampled=function(){return e.get("./api/users/getNotSampled")}}]),app.service("BeerAPI",["$http",function(e){this.getRandom=function(){return e.get("./api/beers/getRandom")},this.getById=function(t){return e.get("./api/beers/getById/"+t)}}]),app.service("StoreData",function(){var e={};this.get=function(){return e},this.set=function(t){e=t}});
//# sourceMappingURL=data:application/json;base64,
